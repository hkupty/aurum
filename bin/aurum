#!/usr/bin/env bash
# This is a draft, initially implemented in bash
# Future versions will be written in either clojure/babashka or
# other higher-level language

function version_gt() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"; }
function version_le() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" == "$1"; }
function version_lt() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1"; }
function version_ge() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"; }

BASE='\033['

BLACK=";30"
RED=";31"
GREEN=";32"
ORANGE=";33"
BLUE=";34"
PURPLE=";35"
CYAN=";36"
WHITE=";37"

CLEAN="0"
BOLD="1"

OFF="${BASE}${CLEAN}m"

function style() { echo -en "${BASE}${2:-$CLEAN};${1}m"; }
function info() { echo -e "$(style $CYAN $BOLD)[au ${1}]$OFF ${*:2}"; }
function success() { echo -e "$(style $GREEN $BOLD)[au ${1}]$OFF ${*:2}"; }
function warn() { echo -e "$(style $ORANGE $BOLD)[au ${1}]$OFF ${*:2}"; }
function error() { echo -e "$(style $RED $BOLD)[au ${1}]$OFF ${*:2}"; }
function previous_line() { echo -en "${BASE}1A"; }
function clear_line() { echo -en "${BASE}2K${BASE}99D"; }

# TODO Make package directories persistent/use XDG_CACHE folder
# TODO Port to babashka
# TODO Add search

function x_json() {
  jq -creM "${1}" <([ -z ${2+x} ] && cat - || echo "${2}")
}

function check_version(){
  local pkg
  local version
  local curr_version

  pkg="$(x_json '.Name' "${1}")"
  version=$(x_json '.Version' "${1}")
  curr_version=$(expac "%v" "${pkg}")

  version_gt "$version" "$curr_version"

  return $?
}

function install_pkg(){
  local url
  local target
  local version
  local pkg
  local flags

  pkg=$(x_json '.Name' "${1}")
  version=$(x_json '.Version' "${1}")
  url=$(x_json '.URLPath' "${1}")
  target="/tmp/aurum/${pkg}-${version}"
  mkdir -p "${target}"
  info "${pkg}" "Installing"
  cd "${target}" && {
    curl -sO "https://aur.archlinux.org/${url}"
    tar xzf "$(echo "${url}" | awk -NF/ '{ print $NF }')"
    cd "$(x_json '.PackageBase' "${1}")" && {
      makepkg -sic "${@:2}"
        set -x
        flags=("${@:2}")
        if (( ${#flags[@]} )); then
          sudo pacman -U "${flags[@]}" "$(fd '.*.tar.gz.*' . | sort -r | head -n1)"
        else
          sudo pacman -U "$(fd '.*.tar.gz.*' . | sort -r | head -n1)"
        set +x

          success "${pkg}" "Installed"
        fi
      } || {
        info "${pkg}" "No update, skipping"
      }
    }
  }
}

function syncdeps(){
  local deps
  local installed
  local newdeps
  local resp

  deps=$(x_json '(.MakeDepends + .Depends)[]' "${1}" | awk -F'[<=>]' '{print $1}')
  installed=$(echo "${deps}" | xargs expac '%n')

  newdeps=$(diff --changed-group-format='%<' --unchanged-group-format=''  <(echo "${deps}") <(echo "${installed}"))

  for dep in ${newdeps}; do
    if ! pacman -Ss "${dep}" > /dev/null; then
      resp=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$dep" | x_json '.results[]')
      syncdeps "${resp}"
      install_pkg "${resp}" --asdeps
    fi
  done
}

function sync(){
  local resp
  local version
  local curr_version

  for pkg in "${@}"; do
    resp=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$pkg" | x_json '.results[]')
    version=$(x_json '.Version' "${resp}")
    syncdeps "${resp}"
    curr_version=$(expac "%v" "$pkg")
    if version_gt "$version" "$curr_version"; then
      install_pkg "${resp}"
    else
      warn "${pkg}" is up-to-date. Skipping.
    fi
  done
}

function refresh(){
  local pkg
  local resp
  local version
  local flags

  for pkg in $(expac -Q '%n' | rg -e '-(git|hg|svn|vcs)'); do
    resp=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$pkg" | x_json '.results[]')
    version=$(x_json '.Version' "${resp}")
    flags=()
    if [[ $(expac '%w' "${pkg}") = 'dependency' ]]; then
      flags+=("--asdeps")
    fi
    syncdeps "${resp}"
    install_pkg "${resp}" "${flags[@]}"
  done
}

function check(){
  local json
  local packages
  local max
  local pkg
  local name

  packages=()
  readarray -t packages < <(pacman -Qm | awk '{print $1}')

  baseurl="https://aur.archlinux.org/rpc/?v=5&type=info"
  for pkg in "${packages[@]}"; do
    baseurl="${baseurl}&arg[]=${pkg}"
  done

  json=$(curl -s "${baseurl}")
  max="$(x_json '.results | length' "${json}")"
  for ((ix=0; ix<max; ix++)); do
    pkg="$(x_json ".results[$ix]" "${json}")"
    name=$(x_json '.Name' "${pkg}")
    if check_version "$pkg"; then

      info "${name}" "$(expac "%v" "${name}") â†’ $(x_json '.Version' "${pkg}")"
    else
      info "${name}" "is up-to-date ($(expac "%v" "${name}"))"
    fi
  done
}

"${@}"
